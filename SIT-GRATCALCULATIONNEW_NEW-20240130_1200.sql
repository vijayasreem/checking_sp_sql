create or replace PROCEDURE GRATCALCULATIONNEW_NEW 
(
    QUOT_OR_POLICY_IN NUMBER,
	QUOT_OR_POLICY_VAR_IN VARCHAR2,
	RATE_VAR_IN VARCHAR2,
    RATE_IN VARCHAR2	
) 
IS
CURRENTGRATCALCULATION_ID NUMBER := 1;

	MEMBERID NUMBER;

	MINIMUMPREMIUM NUMBER := 0;
	MAXIMUMPREMIUM NUMBER := 2000000;

	DATEOFBIRTH TimeStamp;
	VALUATIONEFFECTIVEDATE TimeStamp;
	DATEOFJOINING TimeStamp;
	RETIREMENTAGE Number := 0;
	MAXIMUMSERVICE Number := 0;
	BASICSALARY Number := 0;
	SALARYESCALATION Number := 0;
	MAXSALARY Number := 0;
	MINIMUMSERVICEFORDEATH Number := 0;
	MINIMUMSERVICEFORWITHDRAWAL Number := 0;
	MINIMUMSERVICEFORRETIREMENT Number := 0;
	MAXLIFECOVERSUMASSURED Number := 0;
	NOOFLIVES NUMBER := 1;
	RATETABLE VARCHAR(10);
	VALINTRATE Number;
	LIFECOVERAGEID NUMBER :=0;
	SUMASSURED NUMBER :=0;
	GRATUITYF1 NUMBER;

	TERM NUMBER := 0;
	DOBDERYEAR NUMBER := 0;
	G2DER NUMBER := 0;

	DOBDERAGE NUMBER := 0;
	TERMDOBDERAGE NUMBER := 0;
	DOJDERYEAR NUMBER := 0;
	RETDERYEAR NUMBER := 0;
	RETDERAGE NUMBER := 0;
	TOTALSERVICE NUMBER := 0;

	PASTSERVICE NUMBER := 0;
	PASTSERVICEDEATH NUMBER := 0;
	PASTSERVICEWITHDRAWAL NUMBER := 0;
	PASTSERVICERETIREMENT NUMBER := 0;

	BENEFITSDEATH NUMBER := 0;
	BENEFITSWITHDRAWAL NUMBER := 0;
	BENEFITSRETIREMENT NUMBER := 0;

	CURRENTSERVICEDEATH NUMBER := 0;
	CURRENTSERVICEWITHDRAWAL NUMBER := 0;
	CURRENTSERVICERETIREMENT NUMBER := 0;

	BENECURRENTSERVICEDEATH NUMBER := 0;
	BENECURRENTSERVICEWITHDRAWAL NUMBER := 0;
	BENECURRENTSERVICERETIREMENT NUMBER := 0;

	ACCRUEDGRA NUMBER := 0;
	ACCRUEDGRAT NUMBER := 0;

	TOTALGRA NUMBER := 0;
	TOTALGRAT NUMBER := 0;

	LCSUMASSURED NUMBER := 0;
	LCPREMIUM NUMBER := 0;

	ESCALATEDSALARY NUMBER := 0;
	RTPREMIUM NUMBER;

	NOOFMONTHS NUMBER	:= 0;
	GRATUITYBENEFITID NUMBER := 0;
	GRATUITYBENEFITTYPEID NUMBER := 0;
	GRATUITYSUBBENEFITID NUMBER := 0;
	MINIMUMSUMASSURED NUMBER	:= 0;	
	STANDARDCODEVALUE NUMBER	:= 0;
	CATEGORYID NUMBER	:= 0;
	FCLTYPEID NUMBER	:=0;
	PVOSUM NUMBER	:=0;
	SCSUM NUMBER	:=0;
	FSGSUMASSURED NUMBER	:=0;
	CUMULATIVECOUNT NUMBER :=1;
	NOOFYEARSOFSERVICE NUMBER :=0;	
	GRATUITYCEILINGAMOUNT NUMBER :=0;
	PRVNOOFYEARSOFSERVICE NUMBER :=0;
	CUMPASTSERVICE NUMBER :=0;
	CUMTOTALPASTSERVICE NUMBER :=0;
	ISPASTSERVICE CHAR(1) :='F';
	NOOFYEARSOFSERVICECAL NUMBER := 0;
	HAS_GROUP NUMBER	:=0;
	PRVCATEGORYID NUMBER:=0;
	MODFDPREMRATECRDBILTYFCTR NUMBER:=0;
	CURSOR proc_cursor(QUOT_OR_POLICY_IN IN NUMBER) IS 
	SELECT m.MEMBER_ID,
				m.DATE_OF_BIRTH,
				v.VALUATION_EFFECTIVE_DATE,
				m.DATE_OF_APPOINTMENT,
				lc.RETIREMENT_AGE,
				v.MAXIMUM_SERVICE,
				m.BASIC_SALARY,
				v2.SALARY_ESCALATION,				
				v.MINIMUM_SERVICE_FOR_DEATH,
				v.MINIMUM_SERVICE_FOR_WITHDRAWAL,
				v.MINIMUM_SERVICE_FOR_RETIREMENT,
				lc.MAXIMUM_SUM_ASSURED  AS MAX_LIFE_COVER_SUM_ASSURED,
				lc.MINIMUM_SUM_ASSURED, 
				v.NO_OF_LIVES,				
				v.RATE_TABLE, 
				v2.DISCOUNT_RATE  AS VAL_INT_RATE, 
				lc.LIFE_COVER_TYPE_ID,
				lc.SUM_ASSURED,		
				lc.NO_OF_MONTHS,
				qgb.GRATUITY_BENEFIT_ID ,
				qgb.GRATUITY_BENEFIT_TYPE_ID,
				qgb.GRATUITY_SUB_BENEFIT_ID,
				m.CATEGORY_ID,
				s.FCL_TYPE_ID
			FROM
				QSTG_MEMBER m
			INNER JOIN QSTG_VALUATIONBASIC v 
	            	ON v.QUOTATION_ID = m.QUOTATION_ID
	        INNER  JOIN QSTG_VALUATION v2 
	        	ON v2.QUOTATION_ID =m.QUOTATION_ID 
	        INNER JOIN QSTG_LIFE_COVER lc 
	        	ON	lc.QUOTATION_ID =m.QUOTATION_ID AND m.CATEGORY_ID =lc.CATEGORY_ID 
	        INNER JOIN QSTG_GRATUITY_BENEFIT qgb 
	        	ON qgb.QUOTATION_ID = m.QUOTATION_ID AND qgb.CATEGORY_ID =m.CATEGORY_ID 
	        INNER JOIN QSTG_SCHEMERULE s  ON s.QUOTATION_ID = m.QUOTATION_ID 	               
	        WHERE m.QUOTATION_ID = QUOT_OR_POLICY_IN ;	            

CURSOR proc_policy_cursor(QUOT_OR_POLICY_IN IN NUMBER) IS 
	 SELECT m.MEMBER_ID,
				m.DATE_OF_BIRTH,
				v.VALUATION_EFFECTIVE_DATE,
				m.DATE_OF_APPOINTMENT,
				lc.RETIREMENT_AGE,
				v.MAXIMUM_SERVICE,
				m.BASIC_SALARY,
				v2.SALARY_ESCALATION,				
				v.MINIMUM_SERVICE_FOR_DEATH,
				v.MINIMUM_SERVICE_FOR_WITHDRAWAL,
				v.MINIMUM_SERVICE_FOR_RETIREMENT,
				lc.MAXIMUM_SUM_ASSURED  AS MAX_LIFE_COVER_SUM_ASSURED,
				lc.MINIMUM_SUM_ASSURED, 
				v.NO_OF_LIVES, 
				v.MODFD_PREM_RATE_CRDBILTY_FCTR,				
				v.RATE_TABLE, 
				v2.DISCOUNT_RATE  AS VAL_INT_RATE, 
				lc.LIFE_COVER_TYPE_ID,
				lc.SUM_ASSURED,		
				lc.NO_OF_MONTHS,
				qgb.GRATUITY_BENEFIT_ID ,
				qgb.GRATUITY_BENEFIT_TYPE_ID,
				qgb.GRATUITY_SUB_BENEFIT_ID,
				m.CATEGORY_ID,
				s.FCL_TYPE_ID
			FROM
				PMST_TMP_MEMBER m
			INNER JOIN PMST_TMP_VALUATIONBASIC v 
	            	ON v.TMP_POLICY_ID = m.TMP_POLICY_ID
	        INNER  JOIN PMST_TMP_VALUATION v2 
	        	ON v2.TMP_POLICY_ID =m.TMP_POLICY_ID 
	        INNER JOIN PMST_TMP_LIFE_COVER lc 
	        	ON	lc.TMP_POLICY_ID =m.TMP_POLICY_ID AND m.CATEGORY_ID =lc.CATEGORY_ID 
	        INNER JOIN PMST_TMP_GRATUITY_BENEFIT qgb 
	        	ON qgb.TMP_POLICY_ID = m.TMP_POLICY_ID AND qgb.CATEGORY_ID =m.CATEGORY_ID 
	        INNER JOIN PMST_TMP_SCHEMERULE s  ON s.TMP_POLICY_ID = m.TMP_POLICY_ID
	  	        WHERE m.TMP_POLICY_ID =QUOT_OR_POLICY_IN ;

BEGIN
	DBMS_OUTPUT.ENABLE(1000000);
IF QUOT_OR_POLICY_VAR_IN = 'QUOTATION' THEN	 	
		SELECT STANDARDCODE_VALUE INTO	STANDARDCODEVALUE FROM  STANDARDCODE s WHERE STANDARDCODE_ID =9;

	-- UPDATE THE CALCULATION TO INACTIVE IF THE CALCULATION EXIST FOR SAME QUOTATION NUMBER
	UPDATE GRATCALCULATION SET IS_ACTIVE=0 WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM QSTG_MEMBER WHERE QUOTATION_ID= QUOT_OR_POLICY_IN);

	SELECT MAX(GRATCALCULATION_ID)+1 INTO CURRENTGRATCALCULATION_ID FROM GRATCALCULATION;
	-- TO GET THE SEED ID FOR THE PRIMARY TABLE 

	OPEN proc_cursor(QUOT_OR_POLICY_IN);
  	FETCH proc_cursor INTO MEMBERID,
  							DATEOFBIRTH,
							VALUATIONEFFECTIVEDATE ,
							DATEOFJOINING ,
							RETIREMENTAGE ,
							MAXIMUMSERVICE ,
							BASICSALARY ,
							SALARYESCALATION ,							
							MINIMUMSERVICEFORDEATH ,
							MINIMUMSERVICEFORWITHDRAWAL ,
							MINIMUMSERVICEFORRETIREMENT ,
							MAXLIFECOVERSUMASSURED ,
							MINIMUMSUMASSURED,
							NOOFLIVES,
							RATETABLE,
							VALINTRATE ,
							LIFECOVERAGEID,
							SUMASSURED, 							
							NOOFMONTHS,
							GRATUITYBENEFITID,
							GRATUITYBENEFITTYPEID,
							GRATUITYSUBBENEFITID,
							CATEGORYID,
							FCLTYPEID;

  	WHILE proc_cursor%FOUND LOOP	  	 

	  	IF	(GRATUITYBENEFITTYPEID <> 27) THEN
	  		SELECT  GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH )  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1  FROM  QSTG_GRATUITY_BENEFIT_PROPS WHERE GRATUITY_BENEFIT_ID = GRATUITYBENEFITID;
		END IF;

	  	DOBDERYEAR := EXTRACT (DAY FROM DATEOFBIRTH )/365 + EXTRACT  ( MONTH FROM DATEOFBIRTH )/12 + EXTRACT (YEAR FROM DATEOFBIRTH);	
		G2DER := EXTRACT (DAY FROM VALUATIONEFFECTIVEDATE )/365 + EXTRACT  ( MONTH FROM VALUATIONEFFECTIVEDATE )/12 + EXTRACT (YEAR FROM VALUATIONEFFECTIVEDATE);

		IF (Abs(G2DER - DOBDERYEAR) - Floor(G2DER - DOBDERYEAR) IN (0.498, 0.499)) THEN
	        DOBDERAGE := Round((G2DER - DOBDERYEAR), 0) + 1;
	    ELSE
			DOBDERAGE := Round((G2DER - DOBDERYEAR), 0);
	    END IF;

	   	TERM := TO_NUMBER(RETIREMENTAGE) - DOBDERAGE;
	  	DOJDERYEAR := EXTRACT (DAY FROM DATEOFJOINING )/365 + EXTRACT  ( MONTH FROM DATEOFJOINING )/12 + EXTRACT (YEAR FROM DATEOFJOINING);  		
 		RETDERYEAR := (EXTRACT (DAY FROM DATEOFBIRTH )/365 + EXTRACT  ( MONTH FROM DATEOFBIRTH )/12 + EXTRACT (YEAR FROM DATEOFBIRTH)) + TO_NUMBER(RETIREMENTAGE);

 		-- Calculation for Total Service Starts Here
 		IF Round(Abs(RETDERYEAR - DOJDERYEAR) - Floor(RETDERYEAR - DOJDERYEAR), 3) IN (0.5, 0.501) THEN
        	TOTALSERVICE := Round((RETDERYEAR - DOJDERYEAR), 0) - 1;
	    ELSE
	    	TOTALSERVICE := Round((RETDERYEAR - DOJDERYEAR), 0);
	    END IF;	   

	   	IF (MAXIMUMSERVICE < TOTALSERVICE) THEN
			TOTALSERVICE := MAXIMUMSERVICE;
		END IF;
		-- Calculation for Total Service Ends Here

		-- Calculation for Past Service Starts Here
		IF Round(Abs(G2DER - DOJDERYEAR) - Floor(G2DER - DOJDERYEAR), 3) IN (0.5, 0.501) THEN
	      	PASTSERVICE := Round((G2DER - DOJDERYEAR), 0) - 1;
  		ELSE
    		PASTSERVICE := Round((G2DER - DOJDERYEAR), 0);
	    END IF;   

	  	IF (RETDERYEAR < G2DER) THEN
	   		PASTSERVICE := TOTALSERVICE;
		END IF;

	   	IF (MAXIMUMSERVICE < PASTSERVICE) THEN
			PASTSERVICE := MAXIMUMSERVICE;
		END IF;	

        IF (PASTSERVICE < 0) THEN
			PASTSERVICE := 0;
		END IF;	

	   	PASTSERVICEDEATH := PASTSERVICE;
 		PASTSERVICEWITHDRAWAL := PASTSERVICE;
 		PASTSERVICERETIREMENT := PASTSERVICE;

		--- implement the Sarvice based calculation
		IF (GRATUITYBENEFITTYPEID = 27 ) THEN
			-- 186 is Calaculating Cumulative
			IF	(GRATUITYSUBBENEFITID = 186) THEN				

					WHILE CUMULATIVECOUNT <= PASTSERVICE LOOP	
						SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM QSTG_GRATUITY_BENEFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= CUMULATIVECOUNT 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;			

					IF (PRVNOOFYEARSOFSERVICE <> NOOFYEARSOFSERVICE) THEN
						IF (NOOFYEARSOFSERVICE < PASTSERVICE) THEN
							CUMPASTSERVICE :=  NOOFYEARSOFSERVICE - PRVNOOFYEARSOFSERVICE;
						ELSE
							CUMPASTSERVICE :=  PASTSERVICE - PRVNOOFYEARSOFSERVICE;
						END IF;																	
						ACCRUEDGRA := ACCRUEDGRA + (TO_NUMBER(GRATUITYF1) * TO_NUMBER(CUMPASTSERVICE) * BASICSALARY);						
					END IF;		

					PRVNOOFYEARSOFSERVICE := NOOFYEARSOFSERVICE;
					CUMULATIVECOUNT := CUMULATIVECOUNT +1;				
				END LOOP;

				CUMULATIVECOUNT :=1;
				PRVNOOFYEARSOFSERVICE :=0;
				CUMPASTSERVICE :=0;
			ELSE
			-- 185 is Calaculating Flat
				IF	(GRATUITYSUBBENEFITID = 185) THEN
					SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM QSTG_GRATUITY_BENEFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= PASTSERVICE 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;

					ACCRUEDGRA :=  (TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICE) * BASICSALARY);
				END IF;			
			END IF;		
		ELSE 
			ACCRUEDGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICE) * BASICSALARY;	
		END IF;
		-- Calculation for Past Service Ends Here

 		BENEFITSDEATH := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICEDEATH) * 1; 		 	
		BENEFITSWITHDRAWAL := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICEWITHDRAWAL) * 1;			
		BENEFITSRETIREMENT := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICERETIREMENT) * 1;

		-- Current Service Calculation Starts Here	
		IF((PASTSERVICE + 1) <= MAXIMUMSERVICE AND DOBDERAGE < RETIREMENTAGE) THEN 
			BEGIN 

				IF TOTALSERVICE < MINIMUMSERVICEFORDEATH THEN 
					CURRENTSERVICEDEATH := 0;
				ELSE
					CURRENTSERVICEDEATH := 1;
				END IF;
				IF TOTALSERVICE < MINIMUMSERVICEFORWITHDRAWAL  THEN 
					CURRENTSERVICEWITHDRAWAL := 0;
				ELSE
					CURRENTSERVICEWITHDRAWAL := 1;
				END IF;
				IF TOTALSERVICE < MINIMUMSERVICEFORRETIREMENT THEN 
					CURRENTSERVICERETIREMENT := 0;
				ELSE
					CURRENTSERVICERETIREMENT := 1;
				END IF;
			END;
		END IF;	

		BENECURRENTSERVICEDEATH := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICEDEATH) * 1; 		 	
		BENECURRENTSERVICEWITHDRAWAL := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICEWITHDRAWAL) * 1;			
		BENECURRENTSERVICERETIREMENT := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICERETIREMENT) * 1;

		IF (LIFECOVERAGEID  = 11) THEN
			MAXLIFECOVERSUMASSURED := SUMASSURED;
		END IF;

		IF (ACCRUEDGRA < MINIMUMPREMIUM) THEN
			ACCRUEDGRAT := MINIMUMPREMIUM;
		ELSE
			BEGIN
				IF (ACCRUEDGRA < GRATUITYCEILINGAMOUNT) THEN
					ACCRUEDGRAT := ACCRUEDGRA;
				ELSE					
					ACCRUEDGRAT := GRATUITYCEILINGAMOUNT;
				END IF;				
			END;
		END IF;

		--- implement the Sarvice based calculation for Total Service
		IF (GRATUITYBENEFITTYPEID = 27 ) THEN
			-- 186 is Calaculating Cumulative
			IF	(GRATUITYSUBBENEFITID = 186) THEN				

					WHILE CUMULATIVECOUNT <= TOTALSERVICE LOOP	
						SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM QSTG_GRATUITY_BENEFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= CUMULATIVECOUNT 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;			

					IF (PRVNOOFYEARSOFSERVICE <> NOOFYEARSOFSERVICE) THEN
						IF (NOOFYEARSOFSERVICE < TOTALSERVICE) THEN
							CUMPASTSERVICE :=  NOOFYEARSOFSERVICE - PRVNOOFYEARSOFSERVICE;
						ELSE
							CUMPASTSERVICE :=  TOTALSERVICE - PRVNOOFYEARSOFSERVICE;
						END IF;																	
						TOTALGRA := TOTALGRA + (TO_NUMBER(GRATUITYF1) * TO_NUMBER(CUMPASTSERVICE) * BASICSALARY);						
					END IF;		

					PRVNOOFYEARSOFSERVICE := NOOFYEARSOFSERVICE;
					CUMULATIVECOUNT := CUMULATIVECOUNT +1;				
				END LOOP;

				CUMULATIVECOUNT :=1;
				PRVNOOFYEARSOFSERVICE :=0;
				CUMPASTSERVICE :=0;
			ELSE
			-- 185 is Calaculating Flat
				IF	(GRATUITYSUBBENEFITID = 185) THEN
					SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM QSTG_GRATUITY_BENEFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= TOTALGRA 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;

					TOTALGRA :=  (TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY);
				END IF;			
			END IF;		
		ELSE 
			TOTALGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY;		
		END IF;
		--TOTALGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY;	
		-- Calculation for Total Service Ends Here

		IF (TOTALGRA < MINIMUMPREMIUM) THEN
			TOTALGRAT := MINIMUMPREMIUM;
		ELSE
			BEGIN
				IF (TOTALGRA < GRATUITYCEILINGAMOUNT) THEN
					TOTALGRAT := TOTALGRA;
				ELSE
					TOTALGRAT := GRATUITYCEILINGAMOUNT;
				END IF;				
			END;
		END IF;

	---this could be calculated for FSG Capping
		FSGSUMASSURED := TOTALGRAT - ACCRUEDGRAT;

			IF (FCLTYPEID =179) THEN
				IF(LCSUMASSURED > STANDARDCODEVALUE) THEN
					UPDATE QSTG_MEMBER  SET HAS_EXCEEDED_FCL = 1 WHERE MEMBER_ID = MEMBERID;
					IF (HAS_GROUP = 0 OR PRVCATEGORYID <> CATEGORYID) THEN
						UPDATE QSTG_MEMBER  SET HAS_GROUP_EXCEEDED_FCL  = 1 WHERE QUOTATION_ID =QUOT_OR_POLICY_IN AND CATEGORY_ID =CATEGORYID; 
						HAS_GROUP := HAS_GROUP +1d;
						PRVCATEGORYID :=CATEGORYID;
					END IF;
				END IF;	
			--ELSE	
				---UW Formula implementation			
			END IF;
			IF (LIFECOVERAGEID  = 11) THEN		
				LCSUMASSURED := SUMASSURED ;					
			ELSE
				IF (LIFECOVERAGEID = 12) THEN	
					LCSUMASSURED := BASICSALARY * NOOFMONTHS;	
				ELSE 
					LCSUMASSURED := TOTALGRAT - ACCRUEDGRAT;		
				END IF;	
			END IF;		


			IF (LIFECOVERAGEID  <> 11) THEN
            -- if life coverage not equal to flat, need to compare minimum and maximum sum assured.
				IF (LCSUMASSURED < MAXLIFECOVERSUMASSURED) THEN
					IF (LCSUMASSURED < MINIMUMSUMASSURED) THEN	
						LCSUMASSURED := MINIMUMSUMASSURED;					
					ELSE
						LCSUMASSURED := LCSUMASSURED;					
					END IF;
                 DBMS_OUTPUT.put_line('1');					
				ELSE			
					LCSUMASSURED := MAXLIFECOVERSUMASSURED;
					---FSG SUM Capping Comparision
					IF (LCSUMASSURED > FSGSUMASSURED ) THEN		
						LCSUMASSURED := FSGSUMASSURED;
					END IF;
					               DBMS_OUTPUT.put_line('2');
				END IF;	

				IF (LCSUMASSURED < MINIMUMSUMASSURED) THEN	
					LCSUMASSURED := MINIMUMSUMASSURED;	
					               DBMS_OUTPUT.put_line('3');
				END IF;	

            END IF;  

        IF (RATE_VAR_IN = 'TABULAR') THEN
		SELECT ENUMERATOR/1000 INTO RTPREMIUM FROM OYRGTAVALUES WHERE  IS_ACTIVE = 1 AND AGE = DOBDERAGE AND SELECTOR = RATE_IN AND NOOFLIVES BETWEEN STARTLIVES  AND ENDLIVES;	
		LCPREMIUM := LCSUMASSURED * RTPREMIUM;

        --ELSIF (RATE_VAR_IN = 'FLAT') THEN 		

        END IF;	
		IF CURRENTGRATCALCULATION_ID IS NULL THEN
			CURRENTGRATCALCULATION_ID := 1;		
		END IF;

		-- START TRANSACTION;

		INSERT INTO GRATCALCULATION
		(GRATCALCULATION_ID, MEMBER_ID, TERM, G2_DER, DOB_DER_YEAR, DOB_DER_AGE, DOJ_DER_YEAR, 
			PAST_SERVICE, PAST_SERVICE_DEATH, PAST_SERVICE_WDL, PAST_SERVICE_RET, 
			RET_DER_YEAR, TOTAL_SERVICE, GRATUITY_F1, BENEFITS_DEATH, BENEFITS_WDL, BENEFITS_RET, 
			CURRENT_SERVICE_DEATH, CURRENT_SERVICE_WDL, CURRENT_SERVICE_RET, 
			BENE_CURRENT_SERVICE_DEATH, BENE_CURRENT_SERVICE_WITH, BENE_CURRENT_SERVICE_RET, 
			ACCRUED_GRA, ACCRUED_GRAT, TOTAL_GRA, TOTAL_GRAT, LC_SUM_ASSURED, LC_PREMIUM,PVO_SUM,SC_SUM,CAL_TYPE)
		VALUES(CURRENTGRATCALCULATION_ID, MEMBERID, TERM, G2DER, DOBDERYEAR, DOBDERAGE, DOJDERYEAR, 
				PASTSERVICE, PASTSERVICEDEATH, PASTSERVICEWITHDRAWAL, PASTSERVICERETIREMENT, 
				RETDERYEAR, TOTALSERVICE, GRATUITYF1, BENEFITSDEATH, BENEFITSWITHDRAWAL, BENEFITSRETIREMENT, 
				CURRENTSERVICEDEATH, CURRENTSERVICEWITHDRAWAL, CURRENTSERVICERETIREMENT, 
				BENECURRENTSERVICEDEATH, BENECURRENTSERVICEWITHDRAWAL, BENECURRENTSERVICERETIREMENT, 
				ACCRUEDGRA, ACCRUEDGRAT, TOTALGRA, TOTALGRAT, LCSUMASSURED, LCPREMIUM,PVOSUM,SCSUM,'Q');		
       commit;
		-- TO RESET THE SEEED ID FOR THE PRIMARY TABLE
		CURRENTGRATCALCULATION_ID := CURRENTGRATCALCULATION_ID + 1;		

		-- TO RESET ALL THE VARIABLES TO RESTART THE PROCESS FOR THE NEXT MEMBER ID
		MEMBERID :=0;
		TERM := 0;
		DOBDERYEAR := 0;
		G2DER := 0;
		DOBDERAGE := 0;
		TERMDOBDERAGE := 0;
		DOJDERYEAR := 0;
		RETDERYEAR := 0;
		RETDERAGE := 0;
		TOTALSERVICE := 0;
		PASTSERVICE := 0;
		PASTSERVICEDEATH := 0;
		PASTSERVICEWITHDRAWAL := 0;
		PASTSERVICERETIREMENT := 0;
		BENEFITSDEATH := 0;
		BENEFITSWITHDRAWAL := 0;
		BENEFITSRETIREMENT := 0;
		CURRENTSERVICEDEATH := 0;
		CURRENTSERVICEWITHDRAWAL := 0;
		CURRENTSERVICERETIREMENT := 0;
		BENECURRENTSERVICEDEATH := 0;
		BENECURRENTSERVICEWITHDRAWAL := 0;
		BENECURRENTSERVICERETIREMENT := 0;
		ACCRUEDGRA := 0;
		ACCRUEDGRAT := 0;
		TOTALGRA := 0;
		TOTALGRAT := 0;
		LCSUMASSURED := 0;
		LCPREMIUM := 0;
		ESCALATEDSALARY := 0;		
		NOOFMONTHS := 0;
		GRATUITYBENEFITTYPEID :=0;
		GRATUITYSUBBENEFITID :=0;		
		PVOSUM :=0;
		SCSUM := 0;

  		FETCH proc_cursor INTO MEMBERID,
  							DATEOFBIRTH,
							VALUATIONEFFECTIVEDATE ,
							DATEOFJOINING ,
							RETIREMENTAGE ,
							MAXIMUMSERVICE ,
							BASICSALARY ,
							SALARYESCALATION ,							
							MINIMUMSERVICEFORDEATH ,
							MINIMUMSERVICEFORWITHDRAWAL ,
							MINIMUMSERVICEFORRETIREMENT ,
							MAXLIFECOVERSUMASSURED ,
							MINIMUMSUMASSURED,
							NOOFLIVES ,
							RATETABLE ,
							VALINTRATE ,
							LIFECOVERAGEID, 
							SUMASSURED,							
							NOOFMONTHS,
							GRATUITYBENEFITID,
							GRATUITYBENEFITTYPEID,
							GRATUITYSUBBENEFITID,
							CATEGORYID,
							FCLTYPEID;

  	END LOOP;

  	CLOSE proc_cursor; 

  	-- COMMIT TRANSACTION;
ELSIF QUOT_OR_POLICY_VAR_IN = 'POLICY' THEN 
		SELECT STANDARDCODE_VALUE INTO	STANDARDCODEVALUE FROM  STANDARDCODE s WHERE STANDARDCODE_ID =9;

	-- UPDATE THE CALCULATION TO INACTIVE IF THE CALCULATION EXIST FOR SAME POLICY NUMBER 
	UPDATE GRATCALCULATION SET IS_ACTIVE=0 WHERE MEMBER_ID IN (SELECT MEMBER_ID FROM PMST_TMP_MEMBER WHERE TMP_POLICY_ID = QUOT_OR_POLICY_IN);

	SELECT MAX(GRATCALCULATION_ID)+1 INTO CURRENTGRATCALCULATION_ID FROM GRATCALCULATION;
	-- TO GET THE SEED ID FOR THE PRIMARY TABLE 

	OPEN proc_policy_cursor(QUOT_OR_POLICY_IN);
  	FETCH proc_policy_cursor INTO MEMBERID,
  							DATEOFBIRTH,
							VALUATIONEFFECTIVEDATE ,
							DATEOFJOINING ,
							RETIREMENTAGE ,
							MAXIMUMSERVICE ,
							BASICSALARY ,
							SALARYESCALATION ,							
							MINIMUMSERVICEFORDEATH ,
							MINIMUMSERVICEFORWITHDRAWAL ,
							MINIMUMSERVICEFORRETIREMENT ,
							MAXLIFECOVERSUMASSURED ,
							MINIMUMSUMASSURED,
							NOOFLIVES,
							MODFDPREMRATECRDBILTYFCTR,							
							RATETABLE,
							VALINTRATE ,
							LIFECOVERAGEID,
							SUMASSURED, 							
							NOOFMONTHS,
							GRATUITYBENEFITID,
							GRATUITYBENEFITTYPEID,
							GRATUITYSUBBENEFITID,
							CATEGORYID,
							FCLTYPEID;

  	WHILE proc_policy_cursor%FOUND LOOP	  	 

	  	IF	(GRATUITYBENEFITTYPEID <> 27) THEN
	  		SELECT  GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH )  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1  FROM PMST_TMP_GRATUITY_BENFIT_PROPS  WHERE GRATUITY_BENEFIT_ID = GRATUITYBENEFITID;
		END IF;

	  	DOBDERYEAR := EXTRACT (DAY FROM DATEOFBIRTH )/365 + EXTRACT  ( MONTH FROM DATEOFBIRTH )/12 + EXTRACT (YEAR FROM DATEOFBIRTH);	
		G2DER := EXTRACT (DAY FROM VALUATIONEFFECTIVEDATE )/365 + EXTRACT  ( MONTH FROM VALUATIONEFFECTIVEDATE )/12 + EXTRACT (YEAR FROM VALUATIONEFFECTIVEDATE);

		IF (Abs(G2DER - DOBDERYEAR) - Floor(G2DER - DOBDERYEAR) IN (0.498, 0.499)) THEN
	        DOBDERAGE := Round((G2DER - DOBDERYEAR), 0) + 1;
	    ELSE
			DOBDERAGE := Round((G2DER - DOBDERYEAR), 0);
	    END IF;

	   	TERM := TO_NUMBER(RETIREMENTAGE) - DOBDERAGE;
	  	DOJDERYEAR := EXTRACT (DAY FROM DATEOFJOINING )/365 + EXTRACT  ( MONTH FROM DATEOFJOINING )/12 + EXTRACT (YEAR FROM DATEOFJOINING);  		
 		RETDERYEAR := (EXTRACT (DAY FROM DATEOFBIRTH )/365 + EXTRACT  ( MONTH FROM DATEOFBIRTH )/12 + EXTRACT (YEAR FROM DATEOFBIRTH)) + TO_NUMBER(RETIREMENTAGE);

 		-- Calculation for Total Service Starts Here
 		IF Round(Abs(RETDERYEAR - DOJDERYEAR) - Floor(RETDERYEAR - DOJDERYEAR), 3) IN (0.5, 0.501) THEN
        	TOTALSERVICE := Round((RETDERYEAR - DOJDERYEAR), 0) - 1;
	    ELSE
	    	TOTALSERVICE := Round((RETDERYEAR - DOJDERYEAR), 0);
	    END IF;	   

	   	IF (MAXIMUMSERVICE < TOTALSERVICE) THEN
			TOTALSERVICE := MAXIMUMSERVICE;
		END IF;
		-- Calculation for Total Service Ends Here

		-- Calculation for Past Service Starts Here
		IF Round(Abs(G2DER - DOJDERYEAR) - Floor(G2DER - DOJDERYEAR), 3) IN (0.5, 0.501) THEN
	      	PASTSERVICE := Round((G2DER - DOJDERYEAR), 0) - 1;
  		ELSE
    		PASTSERVICE := Round((G2DER - DOJDERYEAR), 0);
	    END IF;   

	  	IF (RETDERYEAR < G2DER) THEN
	   		PASTSERVICE := TOTALSERVICE;
		END IF;

	   	IF (MAXIMUMSERVICE < PASTSERVICE) THEN
			PASTSERVICE := MAXIMUMSERVICE;
		END IF;	

        IF (PASTSERVICE < 0) THEN
			PASTSERVICE := 0;
		END IF;	

	   	PASTSERVICEDEATH := PASTSERVICE;
 		PASTSERVICEWITHDRAWAL := PASTSERVICE;
 		PASTSERVICERETIREMENT := PASTSERVICE;

		--- implement the Sarvice based calculation
		IF (GRATUITYBENEFITTYPEID = 27 ) THEN
			-- 186 is Calaculating Cumulative
			IF	(GRATUITYSUBBENEFITID = 186) THEN				

					WHILE CUMULATIVECOUNT <= PASTSERVICE LOOP	
						SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM PMST_TMP_GRATUITY_BENFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= CUMULATIVECOUNT 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;			

					IF (PRVNOOFYEARSOFSERVICE <> NOOFYEARSOFSERVICE) THEN
						IF (NOOFYEARSOFSERVICE < PASTSERVICE) THEN
							CUMPASTSERVICE :=  NOOFYEARSOFSERVICE - PRVNOOFYEARSOFSERVICE;
						ELSE
							CUMPASTSERVICE :=  PASTSERVICE - PRVNOOFYEARSOFSERVICE;
						END IF;																	
						ACCRUEDGRA := ACCRUEDGRA + (TO_NUMBER(GRATUITYF1) * TO_NUMBER(CUMPASTSERVICE) * BASICSALARY);						
					END IF;		

					PRVNOOFYEARSOFSERVICE := NOOFYEARSOFSERVICE;
					CUMULATIVECOUNT := CUMULATIVECOUNT +1;				
				END LOOP;

				CUMULATIVECOUNT :=1;
				PRVNOOFYEARSOFSERVICE :=0;
				CUMPASTSERVICE :=0;
			ELSE
			-- 185 is Calaculating Flat
				IF	(GRATUITYSUBBENEFITID = 185) THEN
					SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM PMST_TMP_GRATUITY_BENFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= PASTSERVICE 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;

					ACCRUEDGRA :=  (TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICE) * BASICSALARY);
				END IF;			
			END IF;		
		ELSE 
			ACCRUEDGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICE) * BASICSALARY;	
		END IF;
		-- Calculation for Past Service Ends Here

 		BENEFITSDEATH := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICEDEATH) * 1; 		 	
		BENEFITSWITHDRAWAL := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICEWITHDRAWAL) * 1;			
		BENEFITSRETIREMENT := TO_NUMBER(GRATUITYF1) * TO_NUMBER(PASTSERVICERETIREMENT) * 1;

		-- Current Service Calculation Starts Here	
		IF((PASTSERVICE + 1) <= MAXIMUMSERVICE AND DOBDERAGE < RETIREMENTAGE) THEN 
			BEGIN 
				IF TOTALSERVICE < MINIMUMSERVICEFORDEATH THEN 
					CURRENTSERVICEDEATH := 0;
				ELSE
					CURRENTSERVICEDEATH := 1;
				END IF;
				IF TOTALSERVICE < MINIMUMSERVICEFORWITHDRAWAL  THEN 
					CURRENTSERVICEWITHDRAWAL := 0;
				ELSE
					CURRENTSERVICEWITHDRAWAL := 1;
				END IF;
				IF TOTALSERVICE < MINIMUMSERVICEFORRETIREMENT THEN 
					CURRENTSERVICERETIREMENT := 0;
				ELSE
					CURRENTSERVICERETIREMENT := 1;
				END IF;
			END;
		END IF;	

		BENECURRENTSERVICEDEATH := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICEDEATH) * 1; 		 	
		BENECURRENTSERVICEWITHDRAWAL := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICEWITHDRAWAL) * 1;			
		BENECURRENTSERVICERETIREMENT := TO_NUMBER(GRATUITYF1) * TO_NUMBER(CURRENTSERVICERETIREMENT) * 1;

		IF (LIFECOVERAGEID  = 11) THEN
			MAXLIFECOVERSUMASSURED := SUMASSURED;
		END IF;

		IF (ACCRUEDGRA < MINIMUMPREMIUM) THEN
			ACCRUEDGRAT := MINIMUMPREMIUM;
		ELSE
			BEGIN
				IF (ACCRUEDGRA < GRATUITYCEILINGAMOUNT) THEN
					ACCRUEDGRAT := ACCRUEDGRA;
				ELSE					
					ACCRUEDGRAT := GRATUITYCEILINGAMOUNT;
				END IF;				
			END;
		END IF;

		--- implement the Sarvice based calculation for Total Service
		IF (GRATUITYBENEFITTYPEID = 27 ) THEN
			-- 186 is Calaculating Cumulative
			IF	(GRATUITYSUBBENEFITID = 186) THEN				

					WHILE CUMULATIVECOUNT <= TOTALSERVICE LOOP	
						SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM PMST_TMP_GRATUITY_BENFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= CUMULATIVECOUNT 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;			

					IF (PRVNOOFYEARSOFSERVICE <> NOOFYEARSOFSERVICE) THEN
						IF (NOOFYEARSOFSERVICE < TOTALSERVICE) THEN
							CUMPASTSERVICE :=  NOOFYEARSOFSERVICE - PRVNOOFYEARSOFSERVICE;
						ELSE
							CUMPASTSERVICE :=  TOTALSERVICE - PRVNOOFYEARSOFSERVICE;
						END IF;																	
						TOTALGRA := TOTALGRA + (TO_NUMBER(GRATUITYF1) * TO_NUMBER(CUMPASTSERVICE) * BASICSALARY);						
					END IF;		

					PRVNOOFYEARSOFSERVICE := NOOFYEARSOFSERVICE;
					CUMULATIVECOUNT := CUMULATIVECOUNT +1;				
				END LOOP;

				CUMULATIVECOUNT :=1;
				PRVNOOFYEARSOFSERVICE :=0;
				CUMPASTSERVICE :=0;
			ELSE
			-- 185 is Calaculating Flat
				IF	(GRATUITYSUBBENEFITID = 185) THEN
					SELECT GRATUITY_CEILING_AMOUNT,SALARY_CEILING, (NO_OF_DAYS_WAGE / NO_OF_WORKING_DAYS_PER_MONTH ),NO_OF_YEARS_OF_SERVICE  INTO  GRATUITYCEILINGAMOUNT,MAXSALARY,GRATUITYF1,NOOFYEARSOFSERVICE  FROM (
							SELECT * FROM PMST_TMP_GRATUITY_BENFIT_PROPS qgbp 
							WHERE GRATUITY_BENEFIT_ID =GRATUITYBENEFITID AND NO_OF_YEARS_OF_SERVICE >= TOTALGRA 
								ORDER BY NO_OF_YEARS_OF_SERVICE )WHERE ROWNUM <= 1;

					TOTALGRA :=  (TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY);
				END IF;			
			END IF;		
		ELSE 
			TOTALGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY;		
		END IF;
		--TOTALGRA := TO_NUMBER(GRATUITYF1) * TO_NUMBER(TOTALSERVICE) * BASICSALARY;	
		-- Calculation for Total Service Ends Here

		IF (TOTALGRA < MINIMUMPREMIUM) THEN
			TOTALGRAT := MINIMUMPREMIUM;
		ELSE
			BEGIN
				IF (TOTALGRA < GRATUITYCEILINGAMOUNT) THEN
					TOTALGRAT := TOTALGRA;
				ELSE
					TOTALGRAT := GRATUITYCEILINGAMOUNT;
				END IF;				
			END;
		END IF;

	---this could be calculated for FSG Capping
		FSGSUMASSURED := TOTALGRAT - ACCRUEDGRAT;

			IF (FCLTYPEID =179) THEN
				IF(LCSUMASSURED > STANDARDCODEVALUE) THEN
					UPDATE PMST_TMP_MEMBER  SET HAS_EXCEEDED_FCL = 1 WHERE MEMBER_ID = MEMBERID;
					IF (HAS_GROUP = 0 OR PRVCATEGORYID <> CATEGORYID) THEN
						UPDATE PMST_TMP_MEMBER  SET HAS_GROUP_EXCEEDED_FCL  = 1 WHERE TMP_POLICY_ID =QUOT_OR_POLICY_IN AND CATEGORY_ID =CATEGORYID; 
						HAS_GROUP := HAS_GROUP +1d;
						PRVCATEGORYID :=CATEGORYID;
					END IF;
				END IF;	
			--ELSE	
				---UW Formula implementation			
			END IF;
			IF (LIFECOVERAGEID  = 11) THEN		
				LCSUMASSURED := SUMASSURED ;					
			ELSE
				IF (LIFECOVERAGEID = 12) THEN	
					LCSUMASSURED := BASICSALARY * NOOFMONTHS;	
				ELSE 
					LCSUMASSURED := TOTALGRAT - ACCRUEDGRAT;		
				END IF;	
			END IF;		


			IF (LIFECOVERAGEID  <> 11) THEN	
			 -- if life coverage not equal to flat, need to compare minimum and maximum sum assured.
			IF (LCSUMASSURED < MAXLIFECOVERSUMASSURED) THEN
				IF (LCSUMASSURED < MINIMUMSUMASSURED) THEN	
					LCSUMASSURED := MINIMUMSUMASSURED;					
				ELSE
					LCSUMASSURED := LCSUMASSURED;					
				END IF;			
			ELSE			
				LCSUMASSURED := MAXLIFECOVERSUMASSURED;
				---FSG SUM Capping Comparision
				IF (LCSUMASSURED > FSGSUMASSURED ) THEN		
					LCSUMASSURED := FSGSUMASSURED;
				END IF;
			END IF;	

			IF (LCSUMASSURED < MINIMUMSUMASSURED) THEN	
				LCSUMASSURED := MINIMUMSUMASSURED;	
			END IF;		
           END IF;

        IF (RATE_VAR_IN = 'TABULAR') THEN
		SELECT ENUMERATOR/1000 INTO RTPREMIUM FROM OYRGTAVALUES WHERE  IS_ACTIVE = 1 AND AGE = DOBDERAGE AND SELECTOR = RATE_IN AND NOOFLIVES BETWEEN STARTLIVES  AND ENDLIVES;	

				LCPREMIUM := LCSUMASSURED * RTPREMIUM;	

        ELSIF (RATE_VAR_IN = 'FLAT') THEN 	
		  LCPREMIUM := LCSUMASSURED * MODFDPREMRATECRDBILTYFCTR;

        END IF;		

		IF CURRENTGRATCALCULATION_ID IS NULL THEN
			CURRENTGRATCALCULATION_ID := 1;		
		END IF;

		-- START TRANSACTION;

		INSERT INTO GRATCALCULATION
		(GRATCALCULATION_ID, MEMBER_ID, TERM, G2_DER, DOB_DER_YEAR, DOB_DER_AGE, DOJ_DER_YEAR, 
			PAST_SERVICE, PAST_SERVICE_DEATH, PAST_SERVICE_WDL, PAST_SERVICE_RET, 
			RET_DER_YEAR, TOTAL_SERVICE, GRATUITY_F1, BENEFITS_DEATH, BENEFITS_WDL, BENEFITS_RET, 
			CURRENT_SERVICE_DEATH, CURRENT_SERVICE_WDL, CURRENT_SERVICE_RET, 
			BENE_CURRENT_SERVICE_DEATH, BENE_CURRENT_SERVICE_WITH, BENE_CURRENT_SERVICE_RET, 
			ACCRUED_GRA, ACCRUED_GRAT, TOTAL_GRA, TOTAL_GRAT, LC_SUM_ASSURED, LC_PREMIUM,PVO_SUM,SC_SUM,CAL_TYPE)
		VALUES(CURRENTGRATCALCULATION_ID, MEMBERID, TERM, G2DER, DOBDERYEAR, DOBDERAGE, DOJDERYEAR, 
				PASTSERVICE, PASTSERVICEDEATH, PASTSERVICEWITHDRAWAL, PASTSERVICERETIREMENT, 
				RETDERYEAR, TOTALSERVICE, GRATUITYF1, BENEFITSDEATH, BENEFITSWITHDRAWAL, BENEFITSRETIREMENT, 
				CURRENTSERVICEDEATH, CURRENTSERVICEWITHDRAWAL, CURRENTSERVICERETIREMENT, 
				BENECURRENTSERVICEDEATH, BENECURRENTSERVICEWITHDRAWAL, BENECURRENTSERVICERETIREMENT, 
				ACCRUEDGRA, ACCRUEDGRAT, TOTALGRA, TOTALGRAT, LCSUMASSURED, LCPREMIUM,PVOSUM,SCSUM,'R');		
       commit;
		-- TO RESET THE SEEED ID FOR THE PRIMARY TABLE
		CURRENTGRATCALCULATION_ID := CURRENTGRATCALCULATION_ID + 1;		

		-- TO RESET ALL THE VARIABLES TO RESTART THE PROCESS FOR THE NEXT MEMBER ID
		MEMBERID :=0;
		TERM := 0;
		DOBDERYEAR := 0;
		G2DER := 0;
		DOBDERAGE := 0;
		TERMDOBDERAGE := 0;
		DOJDERYEAR := 0;
		RETDERYEAR := 0;
		RETDERAGE := 0;
		TOTALSERVICE := 0;
		PASTSERVICE := 0;
		PASTSERVICEDEATH := 0;
		PASTSERVICEWITHDRAWAL := 0;
		PASTSERVICERETIREMENT := 0;
		BENEFITSDEATH := 0;
		BENEFITSWITHDRAWAL := 0;
		BENEFITSRETIREMENT := 0;
		CURRENTSERVICEDEATH := 0;
		CURRENTSERVICEWITHDRAWAL := 0;
		CURRENTSERVICERETIREMENT := 0;
		BENECURRENTSERVICEDEATH := 0;
		BENECURRENTSERVICEWITHDRAWAL := 0;
		BENECURRENTSERVICERETIREMENT := 0;
		ACCRUEDGRA := 0;
		ACCRUEDGRAT := 0;
		TOTALGRA := 0;
		TOTALGRAT := 0;
		LCSUMASSURED := 0;
		LCPREMIUM := 0;
		ESCALATEDSALARY := 0;		
		NOOFMONTHS := 0;
		GRATUITYBENEFITTYPEID :=0;
		GRATUITYSUBBENEFITID :=0;		
		PVOSUM :=0;
		SCSUM := 0;

  		FETCH proc_policy_cursor INTO MEMBERID,
  							DATEOFBIRTH,
							VALUATIONEFFECTIVEDATE ,
							DATEOFJOINING ,
							RETIREMENTAGE ,
							MAXIMUMSERVICE ,
							BASICSALARY ,
							SALARYESCALATION ,							
							MINIMUMSERVICEFORDEATH ,
							MINIMUMSERVICEFORWITHDRAWAL ,
							MINIMUMSERVICEFORRETIREMENT ,
							MAXLIFECOVERSUMASSURED ,
							MINIMUMSUMASSURED,
							NOOFLIVES ,
							MODFDPREMRATECRDBILTYFCTR,
							RATETABLE ,
							VALINTRATE ,
							LIFECOVERAGEID, 
							SUMASSURED,							
							NOOFMONTHS,
							GRATUITYBENEFITID,
							GRATUITYBENEFITTYPEID,
							GRATUITYSUBBENEFITID,
							CATEGORYID,
							FCLTYPEID;

  	END LOOP;

  	CLOSE proc_policy_cursor; 
END IF;
END GRATCALCULATIONNEW_NEW;